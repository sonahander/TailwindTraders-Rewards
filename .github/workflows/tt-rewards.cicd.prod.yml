name: TailwindTraders Rewards Pipelines
on:
  push:
    branches: [main, ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [main]
  schedule:
    - cron: '0 0 * * *'

env:
  #AZURE_RESOURCE_GROUP_NAME: Rewards
  AZURE_RESOURCE_GROUP_NAME: tt-rewards-testing
  AZURE_RESOURCE_GROUP_LOCATION: westus2
  AZURE_WEBAPP_NAME: ttrewardswebdemo    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: './Source'      # set this to the path to your web app project, defaults to the repository root
  NUGET_VERSION: '5.3.1'           # set this to the dot net version to use
  AZURE_DATABASE_CONNECTION_STRING: 'Server=tcp:{0}.database.windows.net,1433;Initial Catalog=rewardsdb;Persist Security Info=False;User ID={1};Password={2};MultipleActiveResultSets=False;Encrypt=true;TrustServerCertificate=False;Connection Timeout=30;'
  SQL_SCRIPT_PATH: Source/SQLScripts/CreateTablesAndPopulate.sql

jobs:
  pr-build:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: windows-latest
    steps:
      # checkout the repo
    - uses: actions/checkout@v2
      with:
        # sets the commit to be checked out as the latest commit from the pull request that was initiated
        ref: ${{ github.event.pull_request.head.ref }}
        fetch-depth: 0

    - name: Install Nuget
      uses: nuget/setup-nuget@v1
      with:
        nuget-version: ${{ env.NUGET_VERSION}}

    - name: NuGet to restore dependencies as well as project-specific tools that are specified in the project file
      run: nuget restore '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/TailwindTraders.Rewards.Website.sln'
  
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.0
    
    - name: Run MSBuild
      run: msbuild '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/TailwindTraders.Rewards.Website.sln'

  
  merge-build:
    if: ${{ github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event.pull_request.merged == true) }}
    runs-on: windows-latest
    steps:
    # checkout the repo
    - uses: actions/checkout@v2
      with:        
        ref: main

    - name: Install Nuget
      uses: nuget/setup-nuget@v1
      with:
        nuget-version: ${{ env.NUGET_VERSION}}
    - name: NuGet to restore dependencies as well as project-specific tools that are specified in the project file
      run: nuget restore '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/TailwindTraders.Rewards.Website.sln'
  
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.0
    
    - name: Run MSBuild
      run: msbuild '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/TailwindTraders.Rewards.Website.sln'
        

  nightly-build-and-deploy:
    if: ${{ github.event_name == 'schedule' }}
    runs-on: windows-latest
    steps:
      # checkout the repo
    - uses: actions/checkout@v2
      with:        
        ref: main

    - name: Install Nuget
      uses: nuget/setup-nuget@v1
      with:
        nuget-version: ${{ env.NUGET_VERSION}}

    - name: NuGet to restore dependencies as well as project-specific tools that are specified in the project file
      run: nuget restore '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/TailwindTraders.Rewards.Website.sln'
  
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.0
    
    - name: Run MSBuild
      run: msbuild '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/TailwindTraders.Rewards.Website.sln'

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy ARM
      run: |
        az group create -n ${{ env.AZURE_RESOURCE_GROUP_NAME }} -l ${{ env.AZURE_RESOURCE_GROUP_LOCATION }} 
        az deployment group create -n ghaction -g ${{ env.AZURE_RESOURCE_GROUP_NAME }} --template-file Deploy/deployment.json --parameters sqlServerAdministratorUser=${{ secrets.SQL_ADMIN_USER }} sqlServerAdministratorPassword=${{ secrets.SQL_ADMIN_PWD }}
        $result = az group deployment show --name ghaction --resource-group ${{ env.AZURE_RESOURCE_GROUP_NAME }} --query '[properties.outputs.web.value, properties.outputs.sqlserver.value]' -o tsv
        $web_name = $result[0]
        $sql_server_name = $result[1]
        Write-Output "::set-env name=SQL_SERVER_NAME::$sql_server_name"
        Write-Output "::set-env name=AZURE_WEBAPP_NAME::$web_name"

    - name: Migrate and seed database
      uses: Azure/sql-action@v1
      with:
        server-name: ${{ format('{0}.database.windows.net', env.SQL_SERVER_NAME) }}
        connection-string: ${{ format(env.AZURE_DATABASE_CONNECTION_STRING, env.SQL_SERVER_NAME, secrets.SQL_ADMIN_USER, secrets.SQL_ADMIN_PWD ) }}
        sql-file: ${{ env.SQL_SCRIPT_PATH }}

    - name: 'Run Azure webapp deploy action'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.AZURE_WEBAPP_NAME }} # Replace with your app name
        package: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/Website/'
  
    - uses: azure/appservice-settings@v1
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        connection-strings-json: |
          [{
            "name": "dbContext",
            "value": "${{ format(env.AZURE_DATABASE_CONNECTION_STRING, env.SQL_SERVER_NAME, secrets.SQL_ADMIN_USER, secrets.SQL_ADMIN_PWD ) }}",
            "type": "SQLServer",
            "slotSetting": false
          }]
        
        general-settings-json: '{"alwaysOn": "false", "webSocketsEnabled": "true", "netFrameworkVersion": "v4.0"}' #'General configuration settings as Key Value pairs'
      id: settings
    
